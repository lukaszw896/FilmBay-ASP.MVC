#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FilmBayMVC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-FilmBayMVC-20150104082632")]
	public partial class MyLINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertactor_film_table(actor_film_table instance);
    partial void Updateactor_film_table(actor_film_table instance);
    partial void Deleteactor_film_table(actor_film_table instance);
    partial void Insertwriters_table(writers_table instance);
    partial void Updatewriters_table(writers_table instance);
    partial void Deletewriters_table(writers_table instance);
    partial void Insertactor_table(actor_table instance);
    partial void Updateactor_table(actor_table instance);
    partial void Deleteactor_table(actor_table instance);
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void Insertbought_films_table(bought_films_table instance);
    partial void Updatebought_films_table(bought_films_table instance);
    partial void Deletebought_films_table(bought_films_table instance);
    partial void Insertcomment_table(comment_table instance);
    partial void Updatecomment_table(comment_table instance);
    partial void Deletecomment_table(comment_table instance);
    partial void Insertfavourites_films_table(favourites_films_table instance);
    partial void Updatefavourites_films_table(favourites_films_table instance);
    partial void Deletefavourites_films_table(favourites_films_table instance);
    partial void Insertfilm_genere_table(film_genere_table instance);
    partial void Updatefilm_genere_table(film_genere_table instance);
    partial void Deletefilm_genere_table(film_genere_table instance);
    partial void Insertfilm_music_creator(film_music_creator instance);
    partial void Updatefilm_music_creator(film_music_creator instance);
    partial void Deletefilm_music_creator(film_music_creator instance);
    partial void Insertfilm_other_language_table(film_other_language_table instance);
    partial void Updatefilm_other_language_table(film_other_language_table instance);
    partial void Deletefilm_other_language_table(film_other_language_table instance);
    partial void Insertfilm_photos_table(film_photos_table instance);
    partial void Updatefilm_photos_table(film_photos_table instance);
    partial void Deletefilm_photos_table(film_photos_table instance);
    partial void Insertfilm_table(film_table instance);
    partial void Updatefilm_table(film_table instance);
    partial void Deletefilm_table(film_table instance);
    partial void Insertfilm_writers_table(film_writers_table instance);
    partial void Updatefilm_writers_table(film_writers_table instance);
    partial void Deletefilm_writers_table(film_writers_table instance);
    partial void Insertgenere_table(genere_table instance);
    partial void Updategenere_table(genere_table instance);
    partial void Deletegenere_table(genere_table instance);
    partial void Insertmusic_creator_table(music_creator_table instance);
    partial void Updatemusic_creator_table(music_creator_table instance);
    partial void Deletemusic_creator_table(music_creator_table instance);
    partial void Insertother_language_table(other_language_table instance);
    partial void Updateother_language_table(other_language_table instance);
    partial void Deleteother_language_table(other_language_table instance);
    partial void Insertphotos_table(photos_table instance);
    partial void Updatephotos_table(photos_table instance);
    partial void Deletephotos_table(photos_table instance);
    partial void Insertproducer_table(producer_table instance);
    partial void Updateproducer_table(producer_table instance);
    partial void Deleteproducer_table(producer_table instance);
    partial void Insertvote_table(vote_table instance);
    partial void Updatevote_table(vote_table instance);
    partial void Deletevote_table(vote_table instance);
    #endregion
		
		public MyLINQDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aspnet_FilmBayMVC_20150104082632ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyLINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<actor_film_table> actor_film_tables
		{
			get
			{
				return this.GetTable<actor_film_table>();
			}
		}
		
		public System.Data.Linq.Table<writers_table> writers_tables
		{
			get
			{
				return this.GetTable<writers_table>();
			}
		}
		
		public System.Data.Linq.Table<actor_table> actor_tables
		{
			get
			{
				return this.GetTable<actor_table>();
			}
		}
		
		public System.Data.Linq.Table<admin_table> admin_tables
		{
			get
			{
				return this.GetTable<admin_table>();
			}
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<bought_films_table> bought_films_tables
		{
			get
			{
				return this.GetTable<bought_films_table>();
			}
		}
		
		public System.Data.Linq.Table<comment_table> comment_tables
		{
			get
			{
				return this.GetTable<comment_table>();
			}
		}
		
		public System.Data.Linq.Table<favourites_films_table> favourites_films_tables
		{
			get
			{
				return this.GetTable<favourites_films_table>();
			}
		}
		
		public System.Data.Linq.Table<film_genere_table> film_genere_tables
		{
			get
			{
				return this.GetTable<film_genere_table>();
			}
		}
		
		public System.Data.Linq.Table<film_music_creator> film_music_creators
		{
			get
			{
				return this.GetTable<film_music_creator>();
			}
		}
		
		public System.Data.Linq.Table<film_other_language_table> film_other_language_tables
		{
			get
			{
				return this.GetTable<film_other_language_table>();
			}
		}
		
		public System.Data.Linq.Table<film_photos_table> film_photos_tables
		{
			get
			{
				return this.GetTable<film_photos_table>();
			}
		}
		
		public System.Data.Linq.Table<film_table> film_tables
		{
			get
			{
				return this.GetTable<film_table>();
			}
		}
		
		public System.Data.Linq.Table<film_writers_table> film_writers_tables
		{
			get
			{
				return this.GetTable<film_writers_table>();
			}
		}
		
		public System.Data.Linq.Table<genere_table> genere_tables
		{
			get
			{
				return this.GetTable<genere_table>();
			}
		}
		
		public System.Data.Linq.Table<music_creator_table> music_creator_tables
		{
			get
			{
				return this.GetTable<music_creator_table>();
			}
		}
		
		public System.Data.Linq.Table<other_language_table> other_language_tables
		{
			get
			{
				return this.GetTable<other_language_table>();
			}
		}
		
		public System.Data.Linq.Table<photos_table> photos_tables
		{
			get
			{
				return this.GetTable<photos_table>();
			}
		}
		
		public System.Data.Linq.Table<producer_table> producer_tables
		{
			get
			{
				return this.GetTable<producer_table>();
			}
		}
		
		public System.Data.Linq.Table<user_table> user_tables
		{
			get
			{
				return this.GetTable<user_table>();
			}
		}
		
		public System.Data.Linq.Table<vote_table> vote_tables
		{
			get
			{
				return this.GetTable<vote_table>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.actor_film_table")]
	public partial class actor_film_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private int _id_actor;
		
		private EntityRef<actor_table> _actor_table;
		
		private EntityRef<film_table> _film_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onid_actorChanging(int value);
    partial void Onid_actorChanged();
    #endregion
		
		public actor_film_table()
		{
			this._actor_table = default(EntityRef<actor_table>);
			this._film_table = default(EntityRef<film_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if ((this._actor_table.HasLoadedOrAssignedValue || this._film_table.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_actor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_actor
		{
			get
			{
				return this._id_actor;
			}
			set
			{
				if ((this._id_actor != value))
				{
					this.Onid_actorChanging(value);
					this.SendPropertyChanging();
					this._id_actor = value;
					this.SendPropertyChanged("id_actor");
					this.Onid_actorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="actor_table_actor_film_table", Storage="_actor_table", ThisKey="id_film", OtherKey="id_actor", IsForeignKey=true)]
		public actor_table actor_table
		{
			get
			{
				return this._actor_table.Entity;
			}
			set
			{
				actor_table previousValue = this._actor_table.Entity;
				if (((previousValue != value) 
							|| (this._actor_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._actor_table.Entity = null;
						previousValue.actor_film_tables.Remove(this);
					}
					this._actor_table.Entity = value;
					if ((value != null))
					{
						value.actor_film_tables.Add(this);
						this._id_film = value.id_actor;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("actor_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_actor_film_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.actor_film_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.actor_film_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.writers_table")]
	public partial class writers_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_writer;
		
		private string _writer_name;
		
		private string _writer_surname;
		
		private EntitySet<film_writers_table> _film_writers_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_writerChanging(int value);
    partial void Onid_writerChanged();
    partial void Onwriter_nameChanging(string value);
    partial void Onwriter_nameChanged();
    partial void Onwriter_surnameChanging(string value);
    partial void Onwriter_surnameChanged();
    #endregion
		
		public writers_table()
		{
			this._film_writers_tables = new EntitySet<film_writers_table>(new Action<film_writers_table>(this.attach_film_writers_tables), new Action<film_writers_table>(this.detach_film_writers_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_writer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_writer
		{
			get
			{
				return this._id_writer;
			}
			set
			{
				if ((this._id_writer != value))
				{
					this.Onid_writerChanging(value);
					this.SendPropertyChanging();
					this._id_writer = value;
					this.SendPropertyChanged("id_writer");
					this.Onid_writerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_writer_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string writer_name
		{
			get
			{
				return this._writer_name;
			}
			set
			{
				if ((this._writer_name != value))
				{
					this.Onwriter_nameChanging(value);
					this.SendPropertyChanging();
					this._writer_name = value;
					this.SendPropertyChanged("writer_name");
					this.Onwriter_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_writer_surname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string writer_surname
		{
			get
			{
				return this._writer_surname;
			}
			set
			{
				if ((this._writer_surname != value))
				{
					this.Onwriter_surnameChanging(value);
					this.SendPropertyChanging();
					this._writer_surname = value;
					this.SendPropertyChanged("writer_surname");
					this.Onwriter_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="writers_table_film_writers_table", Storage="_film_writers_tables", ThisKey="id_writer", OtherKey="id_writer")]
		public EntitySet<film_writers_table> film_writers_tables
		{
			get
			{
				return this._film_writers_tables;
			}
			set
			{
				this._film_writers_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_writers_tables(film_writers_table entity)
		{
			this.SendPropertyChanging();
			entity.writers_table = this;
		}
		
		private void detach_film_writers_tables(film_writers_table entity)
		{
			this.SendPropertyChanging();
			entity.writers_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.actor_table")]
	public partial class actor_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_actor;
		
		private string _actor_name;
		
		private string _actor_surname;
		
		private string _actor_photo_url;
		
		private EntitySet<actor_film_table> _actor_film_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_actorChanging(int value);
    partial void Onid_actorChanged();
    partial void Onactor_nameChanging(string value);
    partial void Onactor_nameChanged();
    partial void Onactor_surnameChanging(string value);
    partial void Onactor_surnameChanged();
    partial void Onactor_photo_urlChanging(string value);
    partial void Onactor_photo_urlChanged();
    #endregion
		
		public actor_table()
		{
			this._actor_film_tables = new EntitySet<actor_film_table>(new Action<actor_film_table>(this.attach_actor_film_tables), new Action<actor_film_table>(this.detach_actor_film_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_actor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_actor
		{
			get
			{
				return this._id_actor;
			}
			set
			{
				if ((this._id_actor != value))
				{
					this.Onid_actorChanging(value);
					this.SendPropertyChanging();
					this._id_actor = value;
					this.SendPropertyChanged("id_actor");
					this.Onid_actorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actor_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string actor_name
		{
			get
			{
				return this._actor_name;
			}
			set
			{
				if ((this._actor_name != value))
				{
					this.Onactor_nameChanging(value);
					this.SendPropertyChanging();
					this._actor_name = value;
					this.SendPropertyChanged("actor_name");
					this.Onactor_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actor_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string actor_surname
		{
			get
			{
				return this._actor_surname;
			}
			set
			{
				if ((this._actor_surname != value))
				{
					this.Onactor_surnameChanging(value);
					this.SendPropertyChanging();
					this._actor_surname = value;
					this.SendPropertyChanged("actor_surname");
					this.Onactor_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actor_photo_url", DbType="NVarChar(MAX)")]
		public string actor_photo_url
		{
			get
			{
				return this._actor_photo_url;
			}
			set
			{
				if ((this._actor_photo_url != value))
				{
					this.Onactor_photo_urlChanging(value);
					this.SendPropertyChanging();
					this._actor_photo_url = value;
					this.SendPropertyChanged("actor_photo_url");
					this.Onactor_photo_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="actor_table_actor_film_table", Storage="_actor_film_tables", ThisKey="id_actor", OtherKey="id_film")]
		public EntitySet<actor_film_table> actor_film_tables
		{
			get
			{
				return this._actor_film_tables;
			}
			set
			{
				this._actor_film_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_actor_film_tables(actor_film_table entity)
		{
			this.SendPropertyChanging();
			entity.actor_table = this;
		}
		
		private void detach_actor_film_tables(actor_film_table entity)
		{
			this.SendPropertyChanging();
			entity.actor_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.admin_table")]
	public partial class admin_table
	{
		
		private int _id_admin;
		
		private string _login;
		
		private string _password;
		
		private string _e_mail;
		
		public admin_table()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_admin", DbType="Int NOT NULL")]
		public int id_admin
		{
			get
			{
				return this._id_admin;
			}
			set
			{
				if ((this._id_admin != value))
				{
					this._id_admin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this._login = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_mail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string e_mail
		{
			get
			{
				return this._e_mail;
			}
			set
			{
				if ((this._e_mail != value))
				{
					this._e_mail = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private System.Nullable<bool> _is_admin;
		
		private string _gender;
		
		private string _name;
		
		private string _surname;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
		private EntitySet<bought_films_table> _bought_films_tables;
		
		private EntitySet<comment_table> _comment_tables;
		
		private EntitySet<favourites_films_table> _favourites_films_tables;
		
		private EntitySet<vote_table> _vote_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void Onis_adminChanging(System.Nullable<bool> value);
    partial void Onis_adminChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			this._bought_films_tables = new EntitySet<bought_films_table>(new Action<bought_films_table>(this.attach_bought_films_tables), new Action<bought_films_table>(this.detach_bought_films_tables));
			this._comment_tables = new EntitySet<comment_table>(new Action<comment_table>(this.attach_comment_tables), new Action<comment_table>(this.detach_comment_tables));
			this._favourites_films_tables = new EntitySet<favourites_films_table>(new Action<favourites_films_table>(this.attach_favourites_films_tables), new Action<favourites_films_table>(this.detach_favourites_films_tables));
			this._vote_tables = new EntitySet<vote_table>(new Action<vote_table>(this.attach_vote_tables), new Action<vote_table>(this.detach_vote_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_admin", DbType="Bit")]
		public System.Nullable<bool> is_admin
		{
			get
			{
				return this._is_admin;
			}
			set
			{
				if ((this._is_admin != value))
				{
					this.Onis_adminChanging(value);
					this.SendPropertyChanging();
					this._is_admin = value;
					this.SendPropertyChanged("is_admin");
					this.Onis_adminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(MAX)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="NVarChar(MAX)")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_bought_films_table", Storage="_bought_films_tables", ThisKey="Id", OtherKey="id")]
		public EntitySet<bought_films_table> bought_films_tables
		{
			get
			{
				return this._bought_films_tables;
			}
			set
			{
				this._bought_films_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_comment_table", Storage="_comment_tables", ThisKey="Id", OtherKey="id")]
		public EntitySet<comment_table> comment_tables
		{
			get
			{
				return this._comment_tables;
			}
			set
			{
				this._comment_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_favourites_films_table", Storage="_favourites_films_tables", ThisKey="Id", OtherKey="id")]
		public EntitySet<favourites_films_table> favourites_films_tables
		{
			get
			{
				return this._favourites_films_tables;
			}
			set
			{
				this._favourites_films_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_vote_table", Storage="_vote_tables", ThisKey="Id", OtherKey="id")]
		public EntitySet<vote_table> vote_tables
		{
			get
			{
				return this._vote_tables;
			}
			set
			{
				this._vote_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_bought_films_tables(bought_films_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_bought_films_tables(bought_films_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_comment_tables(comment_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_comment_tables(comment_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_favourites_films_tables(favourites_films_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_favourites_films_tables(favourites_films_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_vote_tables(vote_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_vote_tables(vote_table entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bought_films_table")]
	public partial class bought_films_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private string _id;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<film_table> _film_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    #endregion
		
		public bought_films_table()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._film_table = default(EntityRef<film_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_bought_films_table", Storage="_AspNetUser", ThisKey="id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.bought_films_tables.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.bought_films_tables.Add(this);
						this._id = value.Id;
					}
					else
					{
						this._id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_bought_films_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.bought_films_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.bought_films_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comment_table")]
	public partial class comment_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private string _id;
		
		private string _comment;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<film_table> _film_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public comment_table()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._film_table = default(EntityRef<film_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_comment_table", Storage="_AspNetUser", ThisKey="id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.comment_tables.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.comment_tables.Add(this);
						this._id = value.Id;
					}
					else
					{
						this._id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_comment_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.comment_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.comment_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.favourites_films_table")]
	public partial class favourites_films_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private string _id;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<film_table> _film_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    #endregion
		
		public favourites_films_table()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._film_table = default(EntityRef<film_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_favourites_films_table", Storage="_AspNetUser", ThisKey="id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.favourites_films_tables.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.favourites_films_tables.Add(this);
						this._id = value.Id;
					}
					else
					{
						this._id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_favourites_films_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.favourites_films_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.favourites_films_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_genere_table")]
	public partial class film_genere_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private int _id_genere;
		
		private EntityRef<film_table> _film_table;
		
		private EntityRef<genere_table> _genere_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onid_genereChanging(int value);
    partial void Onid_genereChanged();
    #endregion
		
		public film_genere_table()
		{
			this._film_table = default(EntityRef<film_table>);
			this._genere_table = default(EntityRef<genere_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_genere", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_genere
		{
			get
			{
				return this._id_genere;
			}
			set
			{
				if ((this._id_genere != value))
				{
					if (this._genere_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_genereChanging(value);
					this.SendPropertyChanging();
					this._id_genere = value;
					this.SendPropertyChanged("id_genere");
					this.Onid_genereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_genere_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.film_genere_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.film_genere_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="genere_table_film_genere_table", Storage="_genere_table", ThisKey="id_genere", OtherKey="id_genere", IsForeignKey=true)]
		public genere_table genere_table
		{
			get
			{
				return this._genere_table.Entity;
			}
			set
			{
				genere_table previousValue = this._genere_table.Entity;
				if (((previousValue != value) 
							|| (this._genere_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._genere_table.Entity = null;
						previousValue.film_genere_tables.Remove(this);
					}
					this._genere_table.Entity = value;
					if ((value != null))
					{
						value.film_genere_tables.Add(this);
						this._id_genere = value.id_genere;
					}
					else
					{
						this._id_genere = default(int);
					}
					this.SendPropertyChanged("genere_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_music_creators")]
	public partial class film_music_creator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private int _id_music_creator;
		
		private EntityRef<film_table> _film_table;
		
		private EntityRef<music_creator_table> _music_creator_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onid_music_creatorChanging(int value);
    partial void Onid_music_creatorChanged();
    #endregion
		
		public film_music_creator()
		{
			this._film_table = default(EntityRef<film_table>);
			this._music_creator_table = default(EntityRef<music_creator_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_music_creator", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_music_creator
		{
			get
			{
				return this._id_music_creator;
			}
			set
			{
				if ((this._id_music_creator != value))
				{
					if (this._music_creator_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_music_creatorChanging(value);
					this.SendPropertyChanging();
					this._id_music_creator = value;
					this.SendPropertyChanged("id_music_creator");
					this.Onid_music_creatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_music_creator", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.film_music_creators.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.film_music_creators.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="music_creator_table_film_music_creator", Storage="_music_creator_table", ThisKey="id_music_creator", OtherKey="id_music_creator", IsForeignKey=true)]
		public music_creator_table music_creator_table
		{
			get
			{
				return this._music_creator_table.Entity;
			}
			set
			{
				music_creator_table previousValue = this._music_creator_table.Entity;
				if (((previousValue != value) 
							|| (this._music_creator_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._music_creator_table.Entity = null;
						previousValue.film_music_creators.Remove(this);
					}
					this._music_creator_table.Entity = value;
					if ((value != null))
					{
						value.film_music_creators.Add(this);
						this._id_music_creator = value.id_music_creator;
					}
					else
					{
						this._id_music_creator = default(int);
					}
					this.SendPropertyChanged("music_creator_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_other_language_table")]
	public partial class film_other_language_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private int _id_other_language;
		
		private EntityRef<film_table> _film_table;
		
		private EntityRef<other_language_table> _other_language_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onid_other_languageChanging(int value);
    partial void Onid_other_languageChanged();
    #endregion
		
		public film_other_language_table()
		{
			this._film_table = default(EntityRef<film_table>);
			this._other_language_table = default(EntityRef<other_language_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_other_language", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_other_language
		{
			get
			{
				return this._id_other_language;
			}
			set
			{
				if ((this._id_other_language != value))
				{
					if (this._other_language_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_other_languageChanging(value);
					this.SendPropertyChanging();
					this._id_other_language = value;
					this.SendPropertyChanged("id_other_language");
					this.Onid_other_languageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_other_language_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.film_other_language_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.film_other_language_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="other_language_table_film_other_language_table", Storage="_other_language_table", ThisKey="id_other_language", OtherKey="id_other_language", IsForeignKey=true)]
		public other_language_table other_language_table
		{
			get
			{
				return this._other_language_table.Entity;
			}
			set
			{
				other_language_table previousValue = this._other_language_table.Entity;
				if (((previousValue != value) 
							|| (this._other_language_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._other_language_table.Entity = null;
						previousValue.film_other_language_tables.Remove(this);
					}
					this._other_language_table.Entity = value;
					if ((value != null))
					{
						value.film_other_language_tables.Add(this);
						this._id_other_language = value.id_other_language;
					}
					else
					{
						this._id_other_language = default(int);
					}
					this.SendPropertyChanged("other_language_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_photos_table")]
	public partial class film_photos_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private int _id_photo;
		
		private EntityRef<film_table> _film_table;
		
		private EntityRef<photos_table> _photos_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onid_photoChanging(int value);
    partial void Onid_photoChanged();
    #endregion
		
		public film_photos_table()
		{
			this._film_table = default(EntityRef<film_table>);
			this._photos_table = default(EntityRef<photos_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_photo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_photo
		{
			get
			{
				return this._id_photo;
			}
			set
			{
				if ((this._id_photo != value))
				{
					if (this._photos_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_photoChanging(value);
					this.SendPropertyChanging();
					this._id_photo = value;
					this.SendPropertyChanged("id_photo");
					this.Onid_photoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_photos_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.film_photos_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.film_photos_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photos_table_film_photos_table", Storage="_photos_table", ThisKey="id_photo", OtherKey="id_photo", IsForeignKey=true)]
		public photos_table photos_table
		{
			get
			{
				return this._photos_table.Entity;
			}
			set
			{
				photos_table previousValue = this._photos_table.Entity;
				if (((previousValue != value) 
							|| (this._photos_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._photos_table.Entity = null;
						previousValue.film_photos_tables.Remove(this);
					}
					this._photos_table.Entity = value;
					if ((value != null))
					{
						value.film_photos_tables.Add(this);
						this._id_photo = value.id_photo;
					}
					else
					{
						this._id_photo = default(int);
					}
					this.SendPropertyChanged("photos_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_table")]
	public partial class film_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private string _title;
		
		private string _title_orginal;
		
		private System.TimeSpan _duration;
		
		private string _director_name;
		
		private string _director_surname;
		
		private System.Nullable<int> _age_restriction;
		
		private string _publisher;
		
		private string _storyline;
		
		private string _orginal_language;
		
		private System.Nullable<double> _rating;
		
		private System.Nullable<int> _nuber_of_votes;
		
		private System.Nullable<System.DateTime> _release_date;
		
		private double _film_price;
		
		private string _film_studio;
		
		private string _poster_url;
		
		private EntitySet<actor_film_table> _actor_film_tables;
		
		private EntitySet<bought_films_table> _bought_films_tables;
		
		private EntitySet<comment_table> _comment_tables;
		
		private EntitySet<favourites_films_table> _favourites_films_tables;
		
		private EntitySet<film_genere_table> _film_genere_tables;
		
		private EntitySet<film_music_creator> _film_music_creators;
		
		private EntitySet<film_other_language_table> _film_other_language_tables;
		
		private EntitySet<film_photos_table> _film_photos_tables;
		
		private EntitySet<film_writers_table> _film_writers_tables;
		
		private EntitySet<producer_table> _producer_tables;
		
		private EntitySet<vote_table> _vote_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Ontitle_orginalChanging(string value);
    partial void Ontitle_orginalChanged();
    partial void OndurationChanging(System.TimeSpan value);
    partial void OndurationChanged();
    partial void Ondirector_nameChanging(string value);
    partial void Ondirector_nameChanged();
    partial void Ondirector_surnameChanging(string value);
    partial void Ondirector_surnameChanged();
    partial void Onage_restrictionChanging(System.Nullable<int> value);
    partial void Onage_restrictionChanged();
    partial void OnpublisherChanging(string value);
    partial void OnpublisherChanged();
    partial void OnstorylineChanging(string value);
    partial void OnstorylineChanged();
    partial void Onorginal_languageChanging(string value);
    partial void Onorginal_languageChanged();
    partial void OnratingChanging(System.Nullable<double> value);
    partial void OnratingChanged();
    partial void Onnuber_of_votesChanging(System.Nullable<int> value);
    partial void Onnuber_of_votesChanged();
    partial void Onrelease_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onrelease_dateChanged();
    partial void Onfilm_priceChanging(double value);
    partial void Onfilm_priceChanged();
    partial void Onfilm_studioChanging(string value);
    partial void Onfilm_studioChanged();
    partial void Onposter_urlChanging(string value);
    partial void Onposter_urlChanged();
    #endregion
		
		public film_table()
		{
			this._actor_film_tables = new EntitySet<actor_film_table>(new Action<actor_film_table>(this.attach_actor_film_tables), new Action<actor_film_table>(this.detach_actor_film_tables));
			this._bought_films_tables = new EntitySet<bought_films_table>(new Action<bought_films_table>(this.attach_bought_films_tables), new Action<bought_films_table>(this.detach_bought_films_tables));
			this._comment_tables = new EntitySet<comment_table>(new Action<comment_table>(this.attach_comment_tables), new Action<comment_table>(this.detach_comment_tables));
			this._favourites_films_tables = new EntitySet<favourites_films_table>(new Action<favourites_films_table>(this.attach_favourites_films_tables), new Action<favourites_films_table>(this.detach_favourites_films_tables));
			this._film_genere_tables = new EntitySet<film_genere_table>(new Action<film_genere_table>(this.attach_film_genere_tables), new Action<film_genere_table>(this.detach_film_genere_tables));
			this._film_music_creators = new EntitySet<film_music_creator>(new Action<film_music_creator>(this.attach_film_music_creators), new Action<film_music_creator>(this.detach_film_music_creators));
			this._film_other_language_tables = new EntitySet<film_other_language_table>(new Action<film_other_language_table>(this.attach_film_other_language_tables), new Action<film_other_language_table>(this.detach_film_other_language_tables));
			this._film_photos_tables = new EntitySet<film_photos_table>(new Action<film_photos_table>(this.attach_film_photos_tables), new Action<film_photos_table>(this.detach_film_photos_tables));
			this._film_writers_tables = new EntitySet<film_writers_table>(new Action<film_writers_table>(this.attach_film_writers_tables), new Action<film_writers_table>(this.detach_film_writers_tables));
			this._producer_tables = new EntitySet<producer_table>(new Action<producer_table>(this.attach_producer_tables), new Action<producer_table>(this.detach_producer_tables));
			this._vote_tables = new EntitySet<vote_table>(new Action<vote_table>(this.attach_vote_tables), new Action<vote_table>(this.detach_vote_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title_orginal", DbType="NVarChar(MAX)")]
		public string title_orginal
		{
			get
			{
				return this._title_orginal;
			}
			set
			{
				if ((this._title_orginal != value))
				{
					this.Ontitle_orginalChanging(value);
					this.SendPropertyChanging();
					this._title_orginal = value;
					this.SendPropertyChanged("title_orginal");
					this.Ontitle_orginalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Time NOT NULL")]
		public System.TimeSpan duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_director_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string director_name
		{
			get
			{
				return this._director_name;
			}
			set
			{
				if ((this._director_name != value))
				{
					this.Ondirector_nameChanging(value);
					this.SendPropertyChanging();
					this._director_name = value;
					this.SendPropertyChanged("director_name");
					this.Ondirector_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_director_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string director_surname
		{
			get
			{
				return this._director_surname;
			}
			set
			{
				if ((this._director_surname != value))
				{
					this.Ondirector_surnameChanging(value);
					this.SendPropertyChanging();
					this._director_surname = value;
					this.SendPropertyChanged("director_surname");
					this.Ondirector_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age_restriction", DbType="Int")]
		public System.Nullable<int> age_restriction
		{
			get
			{
				return this._age_restriction;
			}
			set
			{
				if ((this._age_restriction != value))
				{
					this.Onage_restrictionChanging(value);
					this.SendPropertyChanging();
					this._age_restriction = value;
					this.SendPropertyChanged("age_restriction");
					this.Onage_restrictionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publisher", DbType="NVarChar(50)")]
		public string publisher
		{
			get
			{
				return this._publisher;
			}
			set
			{
				if ((this._publisher != value))
				{
					this.OnpublisherChanging(value);
					this.SendPropertyChanging();
					this._publisher = value;
					this.SendPropertyChanged("publisher");
					this.OnpublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storyline", DbType="NVarChar(MAX)")]
		public string storyline
		{
			get
			{
				return this._storyline;
			}
			set
			{
				if ((this._storyline != value))
				{
					this.OnstorylineChanging(value);
					this.SendPropertyChanging();
					this._storyline = value;
					this.SendPropertyChanged("storyline");
					this.OnstorylineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orginal_language", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string orginal_language
		{
			get
			{
				return this._orginal_language;
			}
			set
			{
				if ((this._orginal_language != value))
				{
					this.Onorginal_languageChanging(value);
					this.SendPropertyChanging();
					this._orginal_language = value;
					this.SendPropertyChanged("orginal_language");
					this.Onorginal_languageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Float")]
		public System.Nullable<double> rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nuber_of_votes", DbType="Int")]
		public System.Nullable<int> nuber_of_votes
		{
			get
			{
				return this._nuber_of_votes;
			}
			set
			{
				if ((this._nuber_of_votes != value))
				{
					this.Onnuber_of_votesChanging(value);
					this.SendPropertyChanging();
					this._nuber_of_votes = value;
					this.SendPropertyChanged("nuber_of_votes");
					this.Onnuber_of_votesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release_date", DbType="Date")]
		public System.Nullable<System.DateTime> release_date
		{
			get
			{
				return this._release_date;
			}
			set
			{
				if ((this._release_date != value))
				{
					this.Onrelease_dateChanging(value);
					this.SendPropertyChanging();
					this._release_date = value;
					this.SendPropertyChanged("release_date");
					this.Onrelease_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_price", DbType="Float NOT NULL")]
		public double film_price
		{
			get
			{
				return this._film_price;
			}
			set
			{
				if ((this._film_price != value))
				{
					this.Onfilm_priceChanging(value);
					this.SendPropertyChanging();
					this._film_price = value;
					this.SendPropertyChanged("film_price");
					this.Onfilm_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_studio", DbType="NVarChar(50)")]
		public string film_studio
		{
			get
			{
				return this._film_studio;
			}
			set
			{
				if ((this._film_studio != value))
				{
					this.Onfilm_studioChanging(value);
					this.SendPropertyChanging();
					this._film_studio = value;
					this.SendPropertyChanged("film_studio");
					this.Onfilm_studioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_poster_url", DbType="NVarChar(MAX)")]
		public string poster_url
		{
			get
			{
				return this._poster_url;
			}
			set
			{
				if ((this._poster_url != value))
				{
					this.Onposter_urlChanging(value);
					this.SendPropertyChanging();
					this._poster_url = value;
					this.SendPropertyChanged("poster_url");
					this.Onposter_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_actor_film_table", Storage="_actor_film_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<actor_film_table> actor_film_tables
		{
			get
			{
				return this._actor_film_tables;
			}
			set
			{
				this._actor_film_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_bought_films_table", Storage="_bought_films_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<bought_films_table> bought_films_tables
		{
			get
			{
				return this._bought_films_tables;
			}
			set
			{
				this._bought_films_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_comment_table", Storage="_comment_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<comment_table> comment_tables
		{
			get
			{
				return this._comment_tables;
			}
			set
			{
				this._comment_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_favourites_films_table", Storage="_favourites_films_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<favourites_films_table> favourites_films_tables
		{
			get
			{
				return this._favourites_films_tables;
			}
			set
			{
				this._favourites_films_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_genere_table", Storage="_film_genere_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<film_genere_table> film_genere_tables
		{
			get
			{
				return this._film_genere_tables;
			}
			set
			{
				this._film_genere_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_music_creator", Storage="_film_music_creators", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<film_music_creator> film_music_creators
		{
			get
			{
				return this._film_music_creators;
			}
			set
			{
				this._film_music_creators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_other_language_table", Storage="_film_other_language_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<film_other_language_table> film_other_language_tables
		{
			get
			{
				return this._film_other_language_tables;
			}
			set
			{
				this._film_other_language_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_photos_table", Storage="_film_photos_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<film_photos_table> film_photos_tables
		{
			get
			{
				return this._film_photos_tables;
			}
			set
			{
				this._film_photos_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_writers_table", Storage="_film_writers_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<film_writers_table> film_writers_tables
		{
			get
			{
				return this._film_writers_tables;
			}
			set
			{
				this._film_writers_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_producer_table", Storage="_producer_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<producer_table> producer_tables
		{
			get
			{
				return this._producer_tables;
			}
			set
			{
				this._producer_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_vote_table", Storage="_vote_tables", ThisKey="id_film", OtherKey="id_film")]
		public EntitySet<vote_table> vote_tables
		{
			get
			{
				return this._vote_tables;
			}
			set
			{
				this._vote_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_actor_film_tables(actor_film_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_actor_film_tables(actor_film_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_bought_films_tables(bought_films_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_bought_films_tables(bought_films_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_comment_tables(comment_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_comment_tables(comment_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_favourites_films_tables(favourites_films_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_favourites_films_tables(favourites_films_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_film_genere_tables(film_genere_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_film_genere_tables(film_genere_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_film_music_creators(film_music_creator entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_film_music_creators(film_music_creator entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_film_other_language_tables(film_other_language_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_film_other_language_tables(film_other_language_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_film_photos_tables(film_photos_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_film_photos_tables(film_photos_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_film_writers_tables(film_writers_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_film_writers_tables(film_writers_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_producer_tables(producer_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_producer_tables(producer_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
		
		private void attach_vote_tables(vote_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = this;
		}
		
		private void detach_vote_tables(vote_table entity)
		{
			this.SendPropertyChanging();
			entity.film_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_writers_table")]
	public partial class film_writers_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private int _id_writer;
		
		private EntityRef<film_table> _film_table;
		
		private EntityRef<writers_table> _writers_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onid_writerChanging(int value);
    partial void Onid_writerChanged();
    #endregion
		
		public film_writers_table()
		{
			this._film_table = default(EntityRef<film_table>);
			this._writers_table = default(EntityRef<writers_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_writer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_writer
		{
			get
			{
				return this._id_writer;
			}
			set
			{
				if ((this._id_writer != value))
				{
					if (this._writers_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_writerChanging(value);
					this.SendPropertyChanging();
					this._id_writer = value;
					this.SendPropertyChanged("id_writer");
					this.Onid_writerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_film_writers_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.film_writers_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.film_writers_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="writers_table_film_writers_table", Storage="_writers_table", ThisKey="id_writer", OtherKey="id_writer", IsForeignKey=true)]
		public writers_table writers_table
		{
			get
			{
				return this._writers_table.Entity;
			}
			set
			{
				writers_table previousValue = this._writers_table.Entity;
				if (((previousValue != value) 
							|| (this._writers_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._writers_table.Entity = null;
						previousValue.film_writers_tables.Remove(this);
					}
					this._writers_table.Entity = value;
					if ((value != null))
					{
						value.film_writers_tables.Add(this);
						this._id_writer = value.id_writer;
					}
					else
					{
						this._id_writer = default(int);
					}
					this.SendPropertyChanged("writers_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.genere_table")]
	public partial class genere_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_genere;
		
		private string _genere_name;
		
		private EntitySet<film_genere_table> _film_genere_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_genereChanging(int value);
    partial void Onid_genereChanged();
    partial void Ongenere_nameChanging(string value);
    partial void Ongenere_nameChanged();
    #endregion
		
		public genere_table()
		{
			this._film_genere_tables = new EntitySet<film_genere_table>(new Action<film_genere_table>(this.attach_film_genere_tables), new Action<film_genere_table>(this.detach_film_genere_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_genere", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_genere
		{
			get
			{
				return this._id_genere;
			}
			set
			{
				if ((this._id_genere != value))
				{
					this.Onid_genereChanging(value);
					this.SendPropertyChanging();
					this._id_genere = value;
					this.SendPropertyChanged("id_genere");
					this.Onid_genereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genere_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string genere_name
		{
			get
			{
				return this._genere_name;
			}
			set
			{
				if ((this._genere_name != value))
				{
					this.Ongenere_nameChanging(value);
					this.SendPropertyChanging();
					this._genere_name = value;
					this.SendPropertyChanged("genere_name");
					this.Ongenere_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="genere_table_film_genere_table", Storage="_film_genere_tables", ThisKey="id_genere", OtherKey="id_genere")]
		public EntitySet<film_genere_table> film_genere_tables
		{
			get
			{
				return this._film_genere_tables;
			}
			set
			{
				this._film_genere_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_genere_tables(film_genere_table entity)
		{
			this.SendPropertyChanging();
			entity.genere_table = this;
		}
		
		private void detach_film_genere_tables(film_genere_table entity)
		{
			this.SendPropertyChanging();
			entity.genere_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.music_creator_table")]
	public partial class music_creator_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_music_creator;
		
		private string _music_creator_name;
		
		private string _music_creator_surname;
		
		private EntitySet<film_music_creator> _film_music_creators;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_music_creatorChanging(int value);
    partial void Onid_music_creatorChanged();
    partial void Onmusic_creator_nameChanging(string value);
    partial void Onmusic_creator_nameChanged();
    partial void Onmusic_creator_surnameChanging(string value);
    partial void Onmusic_creator_surnameChanged();
    #endregion
		
		public music_creator_table()
		{
			this._film_music_creators = new EntitySet<film_music_creator>(new Action<film_music_creator>(this.attach_film_music_creators), new Action<film_music_creator>(this.detach_film_music_creators));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_music_creator", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_music_creator
		{
			get
			{
				return this._id_music_creator;
			}
			set
			{
				if ((this._id_music_creator != value))
				{
					this.Onid_music_creatorChanging(value);
					this.SendPropertyChanging();
					this._id_music_creator = value;
					this.SendPropertyChanged("id_music_creator");
					this.Onid_music_creatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_music_creator_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string music_creator_name
		{
			get
			{
				return this._music_creator_name;
			}
			set
			{
				if ((this._music_creator_name != value))
				{
					this.Onmusic_creator_nameChanging(value);
					this.SendPropertyChanging();
					this._music_creator_name = value;
					this.SendPropertyChanged("music_creator_name");
					this.Onmusic_creator_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_music_creator_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string music_creator_surname
		{
			get
			{
				return this._music_creator_surname;
			}
			set
			{
				if ((this._music_creator_surname != value))
				{
					this.Onmusic_creator_surnameChanging(value);
					this.SendPropertyChanging();
					this._music_creator_surname = value;
					this.SendPropertyChanged("music_creator_surname");
					this.Onmusic_creator_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="music_creator_table_film_music_creator", Storage="_film_music_creators", ThisKey="id_music_creator", OtherKey="id_music_creator")]
		public EntitySet<film_music_creator> film_music_creators
		{
			get
			{
				return this._film_music_creators;
			}
			set
			{
				this._film_music_creators.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_music_creators(film_music_creator entity)
		{
			this.SendPropertyChanging();
			entity.music_creator_table = this;
		}
		
		private void detach_film_music_creators(film_music_creator entity)
		{
			this.SendPropertyChanging();
			entity.music_creator_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.other_language_table")]
	public partial class other_language_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_other_language;
		
		private string _other_language_name;
		
		private EntitySet<film_other_language_table> _film_other_language_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_other_languageChanging(int value);
    partial void Onid_other_languageChanged();
    partial void Onother_language_nameChanging(string value);
    partial void Onother_language_nameChanged();
    #endregion
		
		public other_language_table()
		{
			this._film_other_language_tables = new EntitySet<film_other_language_table>(new Action<film_other_language_table>(this.attach_film_other_language_tables), new Action<film_other_language_table>(this.detach_film_other_language_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_other_language", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_other_language
		{
			get
			{
				return this._id_other_language;
			}
			set
			{
				if ((this._id_other_language != value))
				{
					this.Onid_other_languageChanging(value);
					this.SendPropertyChanging();
					this._id_other_language = value;
					this.SendPropertyChanged("id_other_language");
					this.Onid_other_languageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_other_language_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string other_language_name
		{
			get
			{
				return this._other_language_name;
			}
			set
			{
				if ((this._other_language_name != value))
				{
					this.Onother_language_nameChanging(value);
					this.SendPropertyChanging();
					this._other_language_name = value;
					this.SendPropertyChanged("other_language_name");
					this.Onother_language_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="other_language_table_film_other_language_table", Storage="_film_other_language_tables", ThisKey="id_other_language", OtherKey="id_other_language")]
		public EntitySet<film_other_language_table> film_other_language_tables
		{
			get
			{
				return this._film_other_language_tables;
			}
			set
			{
				this._film_other_language_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_other_language_tables(film_other_language_table entity)
		{
			this.SendPropertyChanging();
			entity.other_language_table = this;
		}
		
		private void detach_film_other_language_tables(film_other_language_table entity)
		{
			this.SendPropertyChanging();
			entity.other_language_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.photos_table")]
	public partial class photos_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_photo;
		
		private string _photo_url;
		
		private EntitySet<film_photos_table> _film_photos_tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_photoChanging(int value);
    partial void Onid_photoChanged();
    partial void Onphoto_urlChanging(string value);
    partial void Onphoto_urlChanged();
    #endregion
		
		public photos_table()
		{
			this._film_photos_tables = new EntitySet<film_photos_table>(new Action<film_photos_table>(this.attach_film_photos_tables), new Action<film_photos_table>(this.detach_film_photos_tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_photo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_photo
		{
			get
			{
				return this._id_photo;
			}
			set
			{
				if ((this._id_photo != value))
				{
					this.Onid_photoChanging(value);
					this.SendPropertyChanging();
					this._id_photo = value;
					this.SendPropertyChanged("id_photo");
					this.Onid_photoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo_url", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string photo_url
		{
			get
			{
				return this._photo_url;
			}
			set
			{
				if ((this._photo_url != value))
				{
					this.Onphoto_urlChanging(value);
					this.SendPropertyChanging();
					this._photo_url = value;
					this.SendPropertyChanged("photo_url");
					this.Onphoto_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="photos_table_film_photos_table", Storage="_film_photos_tables", ThisKey="id_photo", OtherKey="id_photo")]
		public EntitySet<film_photos_table> film_photos_tables
		{
			get
			{
				return this._film_photos_tables;
			}
			set
			{
				this._film_photos_tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_photos_tables(film_photos_table entity)
		{
			this.SendPropertyChanging();
			entity.photos_table = this;
		}
		
		private void detach_film_photos_tables(film_photos_table entity)
		{
			this.SendPropertyChanging();
			entity.photos_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.producer_table")]
	public partial class producer_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private string _producer_name;
		
		private string _producer_surname;
		
		private EntityRef<film_table> _film_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void Onproducer_nameChanging(string value);
    partial void Onproducer_nameChanged();
    partial void Onproducer_surnameChanging(string value);
    partial void Onproducer_surnameChanged();
    #endregion
		
		public producer_table()
		{
			this._film_table = default(EntityRef<film_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_producer_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string producer_name
		{
			get
			{
				return this._producer_name;
			}
			set
			{
				if ((this._producer_name != value))
				{
					this.Onproducer_nameChanging(value);
					this.SendPropertyChanging();
					this._producer_name = value;
					this.SendPropertyChanged("producer_name");
					this.Onproducer_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_producer_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string producer_surname
		{
			get
			{
				return this._producer_surname;
			}
			set
			{
				if ((this._producer_surname != value))
				{
					this.Onproducer_surnameChanging(value);
					this.SendPropertyChanging();
					this._producer_surname = value;
					this.SendPropertyChanged("producer_surname");
					this.Onproducer_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_producer_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.producer_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.producer_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_table")]
	public partial class user_table
	{
		
		private int _id_user;
		
		private string _login;
		
		private string _password;
		
		private string _name;
		
		private string _surname;
		
		private System.Nullable<int> _age;
		
		private string _gender;
		
		private string _e_mail;
		
		private System.Nullable<int> _is_admin;
		
		public user_table()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_user", DbType="Int NOT NULL")]
		public int id_user
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					this._id_user = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this._login = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="NVarChar(50)")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this._surname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int")]
		public System.Nullable<int> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this._age = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(50)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this._gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_e_mail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string e_mail
		{
			get
			{
				return this._e_mail;
			}
			set
			{
				if ((this._e_mail != value))
				{
					this._e_mail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_admin", DbType="Int")]
		public System.Nullable<int> is_admin
		{
			get
			{
				return this._is_admin;
			}
			set
			{
				if ((this._is_admin != value))
				{
					this._is_admin = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vote_table")]
	public partial class vote_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_film;
		
		private string _id;
		
		private int _vote;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<film_table> _film_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_filmChanging(int value);
    partial void Onid_filmChanged();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnvoteChanging(int value);
    partial void OnvoteChanged();
    #endregion
		
		public vote_table()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._film_table = default(EntityRef<film_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_film", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_film
		{
			get
			{
				return this._id_film;
			}
			set
			{
				if ((this._id_film != value))
				{
					if (this._film_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_filmChanging(value);
					this.SendPropertyChanging();
					this._id_film = value;
					this.SendPropertyChanged("id_film");
					this.Onid_filmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vote", DbType="Int NOT NULL")]
		public int vote
		{
			get
			{
				return this._vote;
			}
			set
			{
				if ((this._vote != value))
				{
					this.OnvoteChanging(value);
					this.SendPropertyChanging();
					this._vote = value;
					this.SendPropertyChanged("vote");
					this.OnvoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_vote_table", Storage="_AspNetUser", ThisKey="id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.vote_tables.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.vote_tables.Add(this);
						this._id = value.Id;
					}
					else
					{
						this._id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_table_vote_table", Storage="_film_table", ThisKey="id_film", OtherKey="id_film", IsForeignKey=true)]
		public film_table film_table
		{
			get
			{
				return this._film_table.Entity;
			}
			set
			{
				film_table previousValue = this._film_table.Entity;
				if (((previousValue != value) 
							|| (this._film_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film_table.Entity = null;
						previousValue.vote_tables.Remove(this);
					}
					this._film_table.Entity = value;
					if ((value != null))
					{
						value.vote_tables.Add(this);
						this._id_film = value.id_film;
					}
					else
					{
						this._id_film = default(int);
					}
					this.SendPropertyChanged("film_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
